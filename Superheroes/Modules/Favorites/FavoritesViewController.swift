//
//  FavoritesViewController.swift
//  Superheroes
//
//  Created by Adam Cseke on 2022. 03. 02..
//  Copyright (c) 2022. levivig. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import TBEmptyDataSet
import UIKit

final class FavoritesViewController: UIViewController {

    private let generator = UIImpactFeedbackGenerator(style: .medium)
    private var searchVC: UISearchController!
    private var collectionView: UICollectionView!
    private var heroes: Int = 0
    
    private let statusBarFrame = UIApplication.shared.statusBarFrame
    private var statusBarView: UIView!
    
    // MARK: - Public properties -

    var presenter: FavoritesPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        statusBarView = UIView()
        statusBarView.frame = statusBarFrame
        self.view.addSubview(statusBarView)
        self.statusBarView.frame = self.statusBarFrame
        self.statusBarView.backgroundColor = UIColor.systemBackground
        self.navigationController?.navigationBar.backgroundColor = .systemBackground
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.prefersLargeTitles = true
    }
    
    private func setup() {
        configureViewController()
        setupNavigationController()
        configureCollectionView()
    }
    
    private func configureViewController() {
        view.backgroundColor = .systemBackground
    }
    
    private func setupNavigationController() {
        navigationController?.navigationBar.isOpaque = false
        navigationController?.navigationBar.backgroundColor = .clear
        let attributes = [NSAttributedString.Key.foregroundColor: UIColor.label]
        navigationController?.navigationBar.largeTitleTextAttributes = attributes
        tabBarController?.tabBar.isHidden = false
    }
    
    private func configureCollectionView() {
        
        let flowLayout = UICollectionViewFlowLayout()
        
        let width =  view.bounds.width
        let availableWidth = width - 50
        let itemWidth = availableWidth / 2.1
        
        flowLayout.itemSize = CGSize(width: itemWidth, height: itemWidth + 90)
        flowLayout.minimumLineSpacing = 0
        flowLayout.minimumInteritemSpacing = 0
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
        
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
        collectionView.register(SearchedCollectionViewCell.self, forCellWithReuseIdentifier: "searchedCell")
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.backgroundColor = .systemBackground
        collectionView.alwaysBounceVertical = true
        collectionView.emptyDataSetDataSource = self
        collectionView.emptyDataSetDelegate = self
        view.addSubview(collectionView)
        
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
}

// MARK: - Extensions -

extension FavoritesViewController: FavoritesViewInterface {
}

extension FavoritesViewController: UICollectionViewDelegate {
    
}

extension FavoritesViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        heroes
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "searchedCell", for: indexPath) as? SearchedCollectionViewCell else {
            return UICollectionViewCell()
        }
        
        return cell
    }
}

extension FavoritesViewController: TBEmptyDataSetDelegate {
    
    func emptyDataSetShouldDisplay(in scrollView: UIScrollView) -> Bool {
        return self.heroes == 0
    }
}

extension FavoritesViewController: TBEmptyDataSetDataSource {
    
    func customViewForEmptyDataSet(in scrollView: UIScrollView) -> UIView? {
        let view = EmptyView(frame: scrollView.frame)
        view.bind(text: L10n.FavoritesViewController.EmptyStateView.label)
        return view
    }
}

extension FavoritesViewController: SearchedCellDelegate {
    func buttonTapped(at indexPath: IndexPath) {
        print("Button tapped")
    }
    
}
