//
//  SearchViewController.swift
//  Superheroes
//
//  Created by Adam Cseke on 2022. 03. 02..
//  Copyright (c) 2022. levivig. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import TBEmptyDataSet
import SwiftUI
import UIKit

@available(iOS 13.0.0, *)
struct Search_Preview: PreviewProvider {
    static var previews: some View {
        Group {
            ViewControllerPreview {
                SearchWireframe().viewController
            }
            ViewControllerPreview {
                SearchWireframe().viewController
            }
            .preferredColorScheme(.dark)
            
        }
    }
}

final class SearchViewController: UIViewController {

    private let generator = UIImpactFeedbackGenerator(style: .medium)
    
    private var searchVC: UISearchController!
    private var collectionView: UICollectionView!
    private var heroes = 10
    private let itemsPerRow: CGFloat = 2
    
    // MARK: - Public properties -

    var presenter: SearchPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
    }
    
    private func setup() {
        configureViewController()
        configureSearchController()
        configureCollectionView()
    }
    
    private func configureViewController() {
        view.backgroundColor = .systemBackground
    }
    
    private func configureSearchController() {
        searchVC = UISearchController(searchResultsController: nil)
        searchVC.hidesNavigationBarDuringPresentation = true
        searchVC.searchBar.sizeToFit()
        searchVC.searchBar.autocorrectionType = .no
        searchVC.searchBar.placeholder = L10n.SearchViewController.SearchBar.placeholder
        searchVC.automaticallyShowsCancelButton = true
        searchVC.obscuresBackgroundDuringPresentation = true
        searchVC.searchBar.tintColor = Colors.orange.color
        searchVC.searchBar.delegate = self
        navigationItem.searchController = searchVC
    }
    
    private func configureCollectionView() {
        
        let flowLayout = UICollectionViewFlowLayout()
               
        let width =  view.bounds.width
        let availableWidth = width - 50
        let itemWidth = availableWidth / 2.1
        
        flowLayout.itemSize = CGSize(width: itemWidth, height: itemWidth + 90)
        flowLayout.minimumLineSpacing = 0
        flowLayout.minimumInteritemSpacing = 0
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
        
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
        collectionView.register(SearchedCollectionViewCell.self, forCellWithReuseIdentifier: "searchedCell")
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.backgroundColor = .systemBackground
        collectionView.emptyDataSetDataSource = self
        collectionView.emptyDataSetDelegate = self
        view.addSubview(collectionView)
        
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    
}

// MARK: - Extensions -

extension SearchViewController: SearchViewInterface {
}

extension SearchViewController: UICollectionViewDelegate {
    
}

extension SearchViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        heroes
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "searchedCell", for: indexPath) as? SearchedCollectionViewCell else {
            return UICollectionViewCell()
        }
        cell.bind(nameLabel: "Ok",
                  backgroundImageURL: "https://c1.staticflickr.com/3/2884/34091698215_a52e1922cc_b.jpg",
                  indexPath: indexPath,
                  delegate: self)
        return cell
    }
    
}

extension SearchViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let text = searchBar.text, !text.isEmpty else {
            return
        }
        searchVC.dismiss(animated: true, completion: nil)
    }
}

extension SearchViewController: TBEmptyDataSetDelegate {
    
    func emptyDataSetShouldDisplay(in scrollView: UIScrollView) -> Bool {
        return heroes == 0
    }
}

extension SearchViewController: TBEmptyDataSetDataSource {
    
    func customViewForEmptyDataSet(in scrollView: UIScrollView) -> UIView? {
        let view = EmptyView(frame: scrollView.frame)
        view.bind(text: L10n.SearchViewController.EmptyStateView.label)
        return view
    }
}

extension SearchViewController: SearchedCellDelegate {
    func buttonTapped(at indexPath: IndexPath) {
        generator.impactOccurred()
    }
}
